name: Docker CI Release (builder)

on:
  pull_request:
    branches: master
  push:
    branches: master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: "Git: Checkout"
        uses: actions/checkout@v2
      -
        name: "Env: Prepare"
        id: prepare
        run: |
          DOCKER_PLATFORMS=linux/amd64,linux/386,linux/arm64,linux/arm/v7,linux/arm/v6,linux/ppc64le
          VERSION=builder

          REPONAME=$(basename $GITHUB_REPOSITORY)
          DOCKER_IMAGE=padhihomelab/${REPONAME#docker_}

          TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"

          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
                                              --build-arg VERSION=${VERSION} \
                                              --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                                              --build-arg VCS_REF=${GITHUB_SHA::8} \
                                              ${TAGS} -f builder.Dockerfile .
      -
        name: "Docker: Setup Buildx"
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      -
        name: "Docker: Buildx platforms"
        run: echo ${{ steps.buildx.outputs.platforms }}
      -
        name: "Docker: Buildx build"
        run: |
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: "Docker Hub: Login"
        if: success() && github.event_name != 'pull_request'
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | \
          docker login --username "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      -
        name: "Docker: Buildx push"
        if: success() && github.event_name != 'pull_request'
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
      -
        name: "Docker: Check manifest"
        if: always() && github.event_name != 'pull_request'
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      -
        name: "Docker Hub: Update description"
        uses: peter-evans/dockerhub-description@v2
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
          DOCKERHUB_REPOSITORY: ${{ steps.prepare.outputs.docker_image }}
      -
        name: "Clean up"
        if: always()
        run: |
          rm -f ${HOME}/.docker/config.json
